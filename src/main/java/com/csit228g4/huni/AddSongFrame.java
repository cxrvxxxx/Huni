/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.csit228g4.huni;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Brent
 */
public class AddSongFrame extends javax.swing.JFrame {
    private final int playlistId;
    /**
     * Creates new form AddSongFrame
     * @param playlistId
     */
    public AddSongFrame(int playlistId) {
        initComponents();
        
        // Playlist id to add song to
        this.playlistId = playlistId;
        
        // Set window behavior
        this.setTitle("Add a song to playlist");
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(javax.swing.JFrame.DISPOSE_ON_CLOSE);
        
        // Populate tables on window create
        populateSongTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnAddSong = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSong = new javax.swing.JTable();
        btnNewSong = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        btnAddSong.setText("Add");
        btnAddSong.setEnabled(false);
        btnAddSong.setFocusable(false);
        btnAddSong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddSongActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Add a song");

        tblSong.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title", "Artist"
            }
        ));
        jScrollPane1.setViewportView(tblSong);

        btnNewSong.setText("New Song");
        btnNewSong.setFocusable(false);
        btnNewSong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewSongActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnNewSong)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnAddSong)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 194, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(67, 67, 67))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddSong)
                    .addComponent(btnNewSong))
                .addGap(48, 48, 48))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddSongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddSongActionPerformed
        // Adds the selected song to the playlist
        // Retrieve rowId that is currently selected
        int activeRow = tblSong.getSelectedRow();
        // Retrieve user input information
        String title = tblSong.getValueAt(activeRow, 0).toString();
        String author = tblSong.getValueAt(activeRow, 1).toString();
        
        // Pass data to DBHelper instance
        Song song = Session.dbh.getSong(title, author);
        
        int res = 0;
        // Add song to playlist if it exists in the database
        if (song.getId() != -1)
            res = Session.dbh.addPlaylistSong(playlistId, song.getId());
        
        // Handle user response
        switch (res) {
            // Success
            case 1 -> javax.swing.JOptionPane.showMessageDialog(this.getContentPane(), "Song added to playlist");
            // SQL check fail
            case -1 -> javax.swing.JOptionPane.showMessageDialog(this.getContentPane(), "Song already added");
            // Other failures
            default -> javax.swing.JOptionPane.showMessageDialog(this.getContentPane(), "Cannot add song to playlist");
        }
        
        // Close window if successful
        if (res == 1)
            this.dispose();
    }//GEN-LAST:event_btnAddSongActionPerformed

    private void btnNewSongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewSongActionPerformed
        // Opens a window for adding a new song to the database
        // Hide this window
        this.setVisible(false);
        // Init frame and add listener
        AddNewSongFrame addNewSongFrame = new AddNewSongFrame();
        addNewSongFrame.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                showAddSongFrame();
            }
        });
        addNewSongFrame.setVisible(true);
    }//GEN-LAST:event_btnNewSongActionPerformed
    
    private void populateSongTable() {
        // Init table model instance
        DefaultTableModel tableModel = new DefaultTableModel();
        tableModel.addColumn("Title");
        tableModel.addColumn("Artist");
        
        // Retrieve songs from database and add an entry to the table model
        ArrayList<Song> songs = Session.dbh.getAllSongs();
        for (Song song : songs) {
            Object[] row = { song.getTitle(), song.getAuthor() };
            tableModel.addRow(row);            
        }
        
        // Update table instance with new table model
        tblSong.setModel(tableModel);
        tblSong.setDefaultEditor(Object.class, null);
        
        // Add listener for when a row is selected in the table
        tblSong.getSelectionModel().addListSelectionListener(e -> {
            btnAddSong.setEnabled(tblSong.getSelectedRow() != -1);
        });
    }
    
    public void showAddSongFrame() {
        // Show this window and populate table
        this.setVisible(true);
        populateSongTable();
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddSongFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddSongFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddSongFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddSongFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new AddSongFrame(0).setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddSong;
    private javax.swing.JButton btnNewSong;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblSong;
    // End of variables declaration//GEN-END:variables
}
